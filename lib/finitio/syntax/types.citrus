require 'finitio/syntax/lexer'
require 'finitio/syntax/literals'

grammar Finitio::Syntax::Types
  include Finitio::Syntax::Lexer
  include Finitio::Syntax::Literals

  rule type_def
    (metadata? type_name equal type)
    <Finitio::Syntax::TypeDef>
  end

  rule main_type
    (metadata? type)
    <Finitio::Syntax::MainType>
  end

  rule type
    union_type
  end

  # union and sub types

  rule union_type
      (sub_type (pipe sub_type)+)
      <Finitio::Syntax::UnionType>
    | sub_type
  end

  rule sub_type
      (rel_type constraint_def)
      <Finitio::Syntax::SubType>
    | rel_type
  end

  rule constraint_def
    ('(' spacing var_name pipe constraints spacing ')')
    <Finitio::Syntax::ConstraintDef>
  end

  rule constraints
      (named_constraint (opt_comma named_constraint)* opt_comma)
      <Finitio::Syntax::Constraints>
    | unnamed_constraint
  end

  rule named_constraint
    (metadata? constraint_name ':' spacing expression)
    <Finitio::Syntax::NamedConstraint>
  end

  rule unnamed_constraint
    (metadata? expression)
    <Finitio::Syntax::UnnamedConstraint>
  end

  # relational types

  rule rel_type
      relation_type
    | tuple_type
    | collection_type
  end

  rule relation_type
    ('{{' spacing heading spacing '}}')
    <Finitio::Syntax::RelationType>
  end

  rule tuple_type
    ('{' spacing heading spacing '}')
    <Finitio::Syntax::TupleType>
  end

  rule heading
    (attribute? (opt_comma attribute)* (opt_comma allow_extra:dots)? opt_comma?)
    <Finitio::Syntax::Heading>
  end

  rule attribute
    (metadata? attribute_name spacing multiplicity:(':?' | ':') spacing type)
    <Finitio::Syntax::Attribute>
  end

  # collection types

  rule collection_type
      set_type
    | seq_type
    | struct_type
    | term_type
  end

  rule set_type
    ('{' type '}')
    <Finitio::Syntax::SetType>
  end

  rule seq_type
    ('[' type ']')
    <Finitio::Syntax::SeqType>
  end

  rule struct_type
    ('<' type (comma type)* '>')
    <Finitio::Syntax::StructType>
  end

  # terminal forms

  rule term_type
      ad_type
    | builtin_type
    | any_type
    | type_ref
  end

  # ad type

  rule ad_type
    (('.' builtin_type_name)? spacing contract (opt_comma contract)* opt_comma)
    <Finitio::Syntax::AdType>
  end

  rule contract
    (metadata? '<' contract_name '>' spacing type spacing pair?)
    <Finitio::Syntax::Contract>
  end

  rule pair
      inline_pair
    | external_pair
  end

  rule inline_pair
    ('\\' dress:lambda_expr spacing '\\' undress:lambda_expr)
    <Finitio::Syntax::InlinePair>
  end

  rule external_pair
    ('.' builtin_type_name)
    <Finitio::Syntax::ExternalPair>
  end

  # any

  rule any_type
    '.'
    <Finitio::Syntax::AnyType>
  end

  # builtin and refs

  rule builtin_type
    ('.' builtin_type_name)
    <Finitio::Syntax::BuiltinType>
  end

  rule type_ref
    (type_name spacing)
    <Finitio::Syntax::TypeRef>
  end

  # metadata

  rule metadata
    (open_metadata metadata_attr (opt_comma metadata_attr)* opt_comma close_metadata)
    <Finitio::Syntax::Metadata>
  | (open_metadata description:(!'-/' .)+ close_metadata)
    <Finitio::Syntax::Metadata>
  end

  rule metadata_attr
    (attribute_name colon literal)
    <Finitio::Syntax::MetadataAttr>
  end

  # lambda and expressions

  rule lambda_expr
    ('(' spacing var_name pipe expression spacing ')')
    <Finitio::Syntax::LambdaExpr>
  end

  rule expression
    (
        ('(' spacing expression spacing ')')
      | (![\(,\)\n] .)+ expression?
    )
    <Finitio::Syntax::Expression>
  end

end
